import { switchMap, mergeMap } from 'rxjs/operators';
import { Component, OnInit, OnDestroy, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { SubscriptionLike, Subject, of, throwError } from 'rxjs';
import { MatDialog } from '@angular/material/dialog';

import { SeedWordDialogComponent, WordAskedReasons } from '../../../../layout/seed-word-dialog/seed-word-dialog.component';
import { MsgBarService } from '../../../../../services/msg-bar.service';
import { ConfirmationParams, ConfirmationComponent, DefaultConfirmationButtons } from '../../../../layout/confirmation/confirmation.component';
import { OperationError } from '../../../../../utils/operation-error';
import { processServiceError } from '../../../../../utils/errors';
import { WalletTypes } from '../../../../../services/wallet-operations/wallet-objects';
import { AppConfig } from '../../../../../app.config';
import { WalletUtilsService } from '../../../../../services/wallet-operations/wallet-utils.service';

/**
 * Data entered in an instance of CreateWalletFormComponent.
 */
export class WalletFormData {
  /**
   * If the form is for creating a new wallet (true) or loading a walled using a seed (false).
   */
  creatingNewWallet: boolean;
  /**
   * Label for the wallet.
   */
  label: string;
  /**
   * Wallet type.
   */
  type: WalletTypes;
  /**
   * Seed entered by the user.
   */
  seed: string;
  /**
   * xPub key entered by the user.
   */
  xPub: string;
  /**
   * Passphrase for the wallet.
   */
  passphrase: string;
  /**
   * If set, the wallet must be encrypted with this password.
   */
  password: string;
  /**
   * If true, the seed was entered using the assisted mode.
   */
  enterSeedWithAssistance: boolean;
  /**
   * If creating a new wallet, the last automatically generated seed for the assisted mode. If
   * loading a wallet, the last valid seed the user entered using the assisted procedure.
   */
  lastAssistedSeed: string;
  /**
   * Last seed the user entered using the manual mode.
   */
  lastCustomSeed: string;
  /**
   * If creating a new wallet, how many words the automatically generated seed for the
   * assisted mode has. If loading a wallet, how many words the seed entered by the user has.
   */
  numberOfWords: number;
  /**
   * If the user entered a standard seed, if the manual mode was being used.
   */
  customSeedIsNormal: boolean;
  /**
   * If the advanced options panel was open.
   */
  advancedOptionsShown: boolean;
}

/**
 * Form for creating or loading a software wallet.
 */
@Component({
  selector: 'app-create-wallet-form',
  templateUrl: './create-wallet-form.component.html',
  styleUrls: ['./create-wallet-form.component.scss'],
})
export class CreateWalletFormComponent implements OnInit, OnDestroy {
  // If the form is for creating a new wallet (true) or loading a walled using a seed (false).
  @Input() create: boolean;
  // If the form is being shown on the wizard (true) or not (false).
  @Input() onboarding: boolean;
  // Allows to deactivate the form while the system is busy.
  @Input() busy = false;
  // Emits when the user asks for the wallet ot be created.
  @Output() createRequested = new EventEmitter<void>();

  form: FormGroup;
  // If true, the user must enter the ssed using the asisted mode.
  enterSeedWithAssistance = true;
  // If the user confirmed the seed using the asisted mode, while creating a new wallet.
  assistedSeedConfirmed = false;
  // If the user entered a standard seed using the manual mode.
  customSeedIsNormal = true;
  // If the user entered a non-standard seed using the manual mode and confirmed to use it.
  customSeedAccepted = false;
  // If the user selected that the wallet must be created encrypted.
  encrypt = true;
  // If creating a new wallet, the last automatically generated seed for the assisted mode. If
  // loading a wallet, the last valid seed the user entered using the assisted procedure.
  lastAssistedSeed = '';
  // How many words the last autogenerated seed for the assisted mode has, when creating
  // a new wallet.
  numberOfAutogeneratedWords = 0;
  // If the system is currently checking the custom seed entered by the user.
  checkingCustomSeed = false;
  // If the advanced options must be shown on the UI.
  showAdvancedOptions = false;
  // If the passphrase warning must be shown.
  showPassphraseWarning = false;
  // If the user entered a passphrase and confirmed the desire to use it.
  passphraseWarningAccepted = false;

  bip44Enabled = AppConfig.bip44Enabled;
  xPubEnabled = AppConfig.xPubEnabled;

  walletTypes = WalletTypes;

  // Emits every time the seed should be checked again, to know if it is a standard seed.
  private seed: Subject<string> = new Subject<string>();

  private defaultWalletType: WalletTypes = this.create && this.bip44Enabled ? WalletTypes.Bip44 : WalletTypes.Deterministic;

  private seedValiditySubscription: SubscriptionLike;
  private formSubscriptions: SubscriptionLike[] = [];

  // Saves the words the user enters while using the assisted mode.
  private partialSeed: string[];

  constructor(
    private walletUtilsService: WalletUtilsService,
    private dialog: MatDialog,
    private msgBarService: MsgBarService,
    private changeDetector: ChangeDetectorRef,
  ) { }

  ngOnInit() {
    if (!this.onboarding) {
      this.initForm();
    } else {
      this.initForm(false, null);
    }
  }

  ngOnDestroy() {
    this.msgBarService.hide();
    this.seedValiditySubscription.unsubscribe();
    this.removeFormSubscriptions();
    this.createRequested.complete();
  }

  // Allows to know if the form is valid.
  get isValid(): boolean {
    // Check if the basic part of the form is valid.
    if (this.form.valid && (!this.activatePassphraseField || !this.showPassphraseWarning || this.passphraseWarningAccepted)) {
      // If the user selected a wallet type which needs a seed.
      if (!this.activateXPubField) {
        // When entering the seed manually, the system must have finished checking the seed and the
        // seed must be normal or the user must confirm the usage of a custom seed. When using the
        // assisted mode, the user must enter the seed in the appropriate way.
        if (!this.checkingCustomSeed) {
          if ((!this.enterSeedWithAssistance && (this.customSeedIsNormal || this.customSeedAccepted)) ||
          (this.create && this.enterSeedWithAssistance && this.assistedSeedConfirmed) ||
          (!this.create && this.enterSeedWithAssistance && this.lastAssistedSeed.length > 2)) {
            return true;
          }
        }
      } else {
        // If no seed is needed, check is the user entered the xPub key.
        if (this.form.get('xpub').value) {
          return true;
        }
      }
    }

    // If none of the previous alternatives was meet, the form is not valid.
    return false;
  }

  // Allows to know if the passphrase field must be active.
  get activatePassphraseField(): boolean {
    // Show it only if the user selected the bip44 type.
    if (this.form && this.form.get('type').value === WalletTypes.Bip44) {
      return true;
    }

    return false;
  }

  // Allows to know if the xPub field must be active.
  get activateXPubField(): boolean {
    // Show it only if the user selected the xPub type.
    if (this.form && this.form.get('type').value === WalletTypes.XPub) {
      return true;
    }

    return false;
  }

  // Sets if the user has acepted to use a manually entered non-standard seed.
  onCustomSeedAcceptance(event) {
    this.customSeedAccepted = event.checked;
  }

  // Sets if the user has acepted to use a passphrase.
  onPassphraseWarningAcceptance(event) {
    this.passphraseWarningAccepted = event.checked;
  }

  // Sets the user selection regarding whether the wallet must be encrypted or not.
  setEncrypt(event) {
    this.encrypt = event.checked;
    this.form.updateValueAndValidity();
  }

  // Returns the data entered on the form.
  getData(): WalletFormData {
    return {
      creatingNewWallet: this.create,
      type: this.form.value.type,
      label: this.form.value.label,
      seed: this.enterSeedWithAssistance ? this.lastAssistedSeed : this.form.value.seed,
      xPub: this.form.value.xpub ? (this.form.value.xpub as string).trim() : this.form.value.xpub,
      passphrase: this.form.value.passphrase,
      password: !this.onboarding && this.encrypt ? this.form.value.password : null,
      enterSeedWithAssistance: this.enterSeedWithAssistance,
      lastAssistedSeed: this.lastAssistedSeed,
      lastCustomSeed: this.form.value.seed,
      numberOfWords: !this.create ? this.form.value.number_of_words : this.numberOfAutogeneratedWords,
      customSeedIsNormal: this.customSeedIsNormal,
      advancedOptionsShown: this.showAdvancedOptions,
    };
  }

  // Switches between the assisted mode and the manual mode for entering the seed.
  changeSeedType() {
    this.msgBarService.hide();

    if (!this.enterSeedWithAssistance) {
      this.enterSeedWithAssistance = true;
      this.removeConfirmations();
    } else {
      // Ask for confirmation before making the change.
      const confirmationParams: ConfirmationParams = {
        text: this.create ? 'wallet.new.seed.custom-seed-warning-text' : 'wallet.new.seed.custom-seed-warning-text-recovering',
        headerText: 'common.warning-title',
        checkboxText: this.create ? 'common.generic-confirmation-check' : null,
        defaultButtons: DefaultConfirmationButtons.ContinueCancel,
        redTitle: true,
      };

      ConfirmationComponent.openDialog(this.dialog, confirmationParams).afterClosed().subscribe(confirmationResult => {
        if (confirmationResult) {
          this.enterSeedWithAssistance = false;
          this.removeConfirmations();
        }
      });
    }
  }

  // Starts the assisted procedure for entering the seed, if the user is trying to load
  // an existing wallet.
  enterSeed() {
    if (!this.create) {
      this.partialSeed = [];
      this.askForWord(0);
      this.msgBarService.hide();
    }
  }

  // Starts the assisted procedure for confirming the automatically generated seed, if the
  // user is trying to create a new wallet.
  confirmSeed() {
    if (!this.assistedSeedConfirmed) {
      this.partialSeed = [];
      this.askForWord(0);
      this.msgBarService.hide();
    }
  }

  /**
   * Recursively asks the user to enter the words of the seed.
   * @param wordIndex Index of the word which is going to be requested on this step. Must be
   * 0 when starting to ask for the words.
   */
  private askForWord(wordIndex: number) {
    // Open the modal window for entering the seed word.
    return SeedWordDialogComponent.openDialog(this.dialog, {
      reason: this.create ? WordAskedReasons.CreatingSoftwareWallet : WordAskedReasons.RecoveringSoftwareWallet,
      wordNumber: wordIndex + 1,
    }).afterClosed().subscribe(word => {
      if (word) {
        // If creating a new wallet, check if the user entered the requested word.
        if (this.create) {
          const lastSeedWords = this.lastAssistedSeed.split(' ');
          if (word !== lastSeedWords[wordIndex]) {
            this.msgBarService.showError('wallet.new.seed.incorrect-word-error');

            return;
          }
        }

        // Add the entered word to the list of words the user already entered.
        this.partialSeed[wordIndex] = word;
        wordIndex += 1;

        if ((this.create && wordIndex < this.numberOfAutogeneratedWords) || (!this.create && wordIndex < this.form.controls['number_of_words'].value)) {
          this.askForWord(wordIndex);
        } else {
          if (this.create) {
            // Set the seed as confirmed.
            this.assistedSeedConfirmed = true;
          } else {
            // Build the seed.
            let enteredSeed = '';
            this.partialSeed.forEach(currentWord => enteredSeed += currentWord + ' ');
            enteredSeed = enteredSeed.substr(0, enteredSeed.length - 1);

            // Check the seed and use it only if it is valid.
            this.walletUtilsService.verifySeed(enteredSeed).subscribe(valid => {
              if (valid) {
                this.lastAssistedSeed = enteredSeed;
              } else {
                this.msgBarService.showError('wallet.new.seed.invalid-seed-error');
              }
            }, () => this.msgBarService.showError('wallet.new.seed.invalid-seed-error'));
          }
        }
      }
    });
  }

  /**
   * Inits or resets the form.
   * @param create If the form is for creating a new wallet (true) or loading a walled using
   * a seed (false). Use null to avoid changing the value set using the html tag.
   * @param data Data to populate the form.
   */
  initForm(create: boolean = null, data: WalletFormData = null) {
    this.msgBarService.hide();

    create = create !== null ? create : this.create;

    this.defaultWalletType = create && this.bip44Enabled ? WalletTypes.Bip44 : WalletTypes.Deterministic;

    this.lastAssistedSeed = '';
    this.enterSeedWithAssistance = true;

    const validators = [];
    if (create) {
      validators.push(this.seedMatchValidator.bind(this));
    }
    if (!this.onboarding) {
      // The password is entered on a different form while using the wizard.
      validators.push(this.validatePasswords.bind(this));
    }
    validators.push(this.mustHaveSeed.bind(this));

    this.form = new FormGroup({}, validators);
    this.form.addControl('label', new FormControl(data ? data.label : '', [Validators.required]));
    this.form.addControl('seed', new FormControl(data ? data.lastCustomSeed : ''));
    this.form.addControl('confirm_seed', new FormControl(data ? data.lastCustomSeed : ''));
    this.form.addControl('xpub', new FormControl(data ? data.xPub : ''));
    this.form.addControl('type', new FormControl(data ? data.type : this.defaultWalletType, [Validators.required]));
    this.form.addControl('passphrase', new FormControl(data ? data.passphrase : ''));
    this.form.addControl('password', new FormControl());
    this.form.addControl('confirm_password', new FormControl());
    this.form.addControl('number_of_words', new FormControl(!this.create && data && data.numberOfWords ? data.numberOfWords : 12));

    this.removeConfirmations(false);

    // Create a new random seed.
    if (create && !data) {
      this.generateSeed(128);
    }

    this.showAdvancedOptions = false;
    this.showPassphraseWarning = false;

    // Use the provided data.
    if (data) {
      this.enterSeedWithAssistance = data.enterSeedWithAssistance;
      this.lastAssistedSeed = data.lastAssistedSeed;
      this.assistedSeedConfirmed = true;
      this.customSeedAccepted = true;
      this.customSeedIsNormal = data.customSeedIsNormal;

      this.showAdvancedOptions = data.advancedOptionsShown;
      this.showPassphraseWarning = create && !!data.passphrase;
      this.passphraseWarningAccepted = true;

      if (this.create) {
        this.numberOfAutogeneratedWords = data.numberOfWords;
      }
    }

    this.removeFormSubscriptions();

    this.formSubscriptions = [];

    // Ensure the UI is updated quickly.
    this.formSubscriptions.push(
      this.form.get('type').statusChanges.subscribe(() => {
        setTimeout(() => {
          this.changeDetector.detectChanges();
        });
      }),
    );

    // Check the custom seed and invaidate the custom seed confirmation.
    this.formSubscriptions.push(
      this.form.get('seed').statusChanges.subscribe(() => {
        this.customSeedAccepted = false;
        this.seed.next(this.form.get('seed').value);
      }),
    );
    this.formSubscriptions.push(
      this.form.get('confirm_seed').statusChanges.subscribe(() => {
        this.customSeedAccepted = false;
        this.seed.next(this.form.get('seed').value);
      }),
    );

    // Cancel the passphrase confirmation and show the warning if needed.
    this.formSubscriptions.push(
      this.form.get('passphrase').statusChanges.subscribe(() => {
        this.passphraseWarningAccepted = false;
        this.showPassphraseWarning = this.create && !!this.form.get('passphrase').value;
      }),
    );
    this.subscribeToSeedValidation();
  }

  // Generates a new random seed for when creating a new wallet.
  generateSeed(entropy: number) {
    if (entropy === 128) {
      this.numberOfAutogeneratedWords = 12;
    } else {
      this.numberOfAutogeneratedWords = 24;
    }

    this.walletUtilsService.generateSeed(entropy).subscribe(seed => {
      this.lastAssistedSeed = seed;
      this.form.get('seed').setValue(seed);
      this.removeConfirmations();
    });
  }

  // Request the wallet to be created or loaded.
  requestCreation() {
    this.createRequested.emit();
  }

  // Shows or hides the advanced options.
  toggleAdvancedOptions() {
    // Ask for confirmation if the user made changes and the panel will be closed.
    if (this.showAdvancedOptions && (this.form.get('passphrase').value || this.form.get('type').value !== this.defaultWalletType)) {
      const confirmationParams: ConfirmationParams = {
        text: 'wallet.new.advanced-options-close-warning',
        defaultButtons: DefaultConfirmationButtons.YesNo,
      };

      ConfirmationComponent.openDialog(this.dialog, confirmationParams).afterClosed().subscribe(confirmationResult => {
        if (confirmationResult) {
          this.finishTogglingAdvancedOptions();
        }
      });
    } else {
      this.finishTogglingAdvancedOptions();
    }
  }

  private finishTogglingAdvancedOptions() {
    this.showAdvancedOptions = !this.showAdvancedOptions;
    // Reset the values.
    this.form.get('passphrase').setValue('');
    this.form.get('type').setValue(this.defaultWalletType);
  }

  /**
   * Removes the confirmations the user could have made for accepting the seed.
   * @param cleanSecondSeedField If true, the second field for manually entering a seed (the
   * one used for confirming the seed by entering it again) will be cleaned.
   */
  private removeConfirmations(cleanSecondSeedField = true) {
    this.customSeedAccepted = false;
    this.assistedSeedConfirmed = false;
    this.passphraseWarningAccepted = false;
    if (cleanSecondSeedField) {
      this.form.get('confirm_seed').setValue('');
    }
    this.form.updateValueAndValidity();
  }

  // Makes the component continually check if the user has manually entered a non-standard seed.
  private subscribeToSeedValidation() {
    if (this.seedValiditySubscription) {
      this.seedValiditySubscription.unsubscribe();
    }

    this.seedValiditySubscription = this.seed.asObservable().pipe(switchMap(seed => {
      // Verify the seed if it was entered manually and was confirmed.
      if ((!this.seedMatchValidator() || !this.create) && !this.enterSeedWithAssistance && seed.trim().length > 0) {
        this.checkingCustomSeed = true;

        return this.walletUtilsService.verifySeed(seed);
      } else {
        return of(true);
      }
    })).subscribe(valid => {
      this.checkingCustomSeed = false;
      this.customSeedIsNormal = valid;
    }, (error: OperationError) => {
      this.checkingCustomSeed = false;
      // If the node said the seed is not standard, ask the user for confirmation before
      // allowing to use it.
      error = processServiceError(error);
      if (error && error.originalError && error.originalError.status === 422) {
        this.customSeedIsNormal = false;
      } else {
        this.customSeedIsNormal = true;
        this.msgBarService.showWarning('wallet.new.seed-checking-error');
      }
      this.subscribeToSeedValidation();
    });
  }

  // Validator that, if the wallet must be encrypted, checks if the 2 password match.
  private validatePasswords() {
    if (this.encrypt) {
      if (this.form && this.form.get('password') && this.form.get('confirm_password')) {
        if (this.form.get('password').value) {
          if (this.form.get('password').value !== this.form.get('confirm_password').value) {
            return { NotEqual: true };
          }
        } else {
          return { Required: true };
        }
      } else {
        return { Required: true };
      }
    }

    return null;
  }

  // Validator that checks if a seed has been manually entered, if the assisted mode is
  // not activated and the selected wallet type is not xPub.
  private mustHaveSeed() {
    if (!this.enterSeedWithAssistance && !this.activateXPubField) {
      if ((this.form.get('seed').value as string) === '') {
        return { Required: true };
      }
    }

    return null;
  }

  // Validator that checks if the manually entered seeds match, if the assisted mode is
  // not activated and the selected wallet type is not xPub.
  private seedMatchValidator() {
    if (this.enterSeedWithAssistance || this.activateXPubField) {
      return null;
    }

    if (this.form && this.form.get('seed') && this.form.get('confirm_seed')) {
      return this.form.get('seed').value === this.form.get('confirm_seed').value ? null : { NotEqual: true };
    } else {
      return { NotEqual: true };
    }
  }

  private removeFormSubscriptions() {
    this.formSubscriptions.forEach(s => s.unsubscribe());
  }
}
